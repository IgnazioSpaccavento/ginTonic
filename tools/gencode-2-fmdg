#!/usr/bin/env bash

set -e

function decompress {
  local INPUT="$1"
  case $(file "$INPUT" | awk -F ': ' '{print $2}') in
    "ASCII text"* )
      cat "$INPUT"
      ;;
    "gzip compressed data"* )
      gunzip -c "$INPUT"
      ;;
    "bzip2 compressed data"* )
      bunzip2 -c "$INPUT"
      ;;
    "XZ compressed data"* )
      unxz -c "$INPUT"
      ;;
    * )
      usage
      echo -e "\nERROR: Sorry, your input file \"${INPUT}\" has a format I do not recognize"
      exit 1
      ;;
  esac
}

GENOME="$1"
ANNOTATION="$2"

if [[ "$GENOME" == "" || "$ANNOTATION" == "" ]]; then
  echo "SYNTAX: gencode-2-fmdg <genome_as_FASTA> <annotation_as_GENCODE_GTF>"
  echo " Input files can be compressed with gzip, bzip2 or xz"
  exit 1
fi

GENOME_BASE=$(basename "$GENOME")
ANNOTATION_BASE=$(basename "$ANNOTATION")

decompress "$GENOME" | FASTools | awk -F '\t' '
  {
    split($1,s,"[ \t]+")
    print s[1]"\t1\t"length(gensub("[\r]","","g",$2))
  }
' > "${GENOME_BASE}.metrics.txt"

decompress "$ANNOTATION" | awk -F '\t' '
  function get(what) {
    return gensub("^.*"what" \"([^\"]+)\".*$","\\1",1,$9)
  }
  function get_exon_number() {
    return gensub("^.*exon_number ([0-9]+).*$","\\1",1,$9)
  }
  {
    if ($0!~"^#"&&$3=="exon")
      print get("transcript_id")"\t"get_exon_number()"\t"$1"\t"$7"\t"$4"\t"$5
  }
' | awk -F '\t' '
  {
    if ($1!=curr) {
      if (NR>1)
        print res;
      curr=$1
      res=$1"\t"$3"\t"$4"\t"$5"\t"$6
    } else
      res=res"\t"$5"\t"$6
  }
' > "${ANNOTATION_BASE}.transcripts.txt"

cat <(cat "${GENOME_BASE}.metrics.txt" | awk -F '\t' '
  {
    print $1"\t"$2"\t(\n"$1"\t"$3"\t)\n"$1"\t-"$3"\t(\n"$1"\t-"$2"\t)"
  }
') <(cat "${ANNOTATION_BASE}.transcripts.txt" | awk -F '\t' '
  {
    sgn=($3=="+"?1:-1)
    for (i=4;i<NF;i+=2)
      print $2"\t"(sgn*$i-1)"\t)\n"$2"\t"(sgn*$i)"\t(\n"$2"\t"(sgn*$(i+1))"\t)\n"$2"\t"(sgn*$(i+1)+1)"\t(";
    for (i=5;i<NF;i+=2)
      print $2"\t"(sgn*$i)"\t)\n"$2"\t"(sgn*$(i+1))"\t("
  }
' | tee "${ANNOTATION_BASE}.transcripts.breaks.txt") | sort -k1,1 -k2,2n | uniq | awk -F '\t' '
  {
    nr=(NR-1)%2
    if (nr==0&&$3!="("||nr==1&&$3!=")") {
      print "ERROR: Malformed annotation"
      exit 1
    }
    if (nr==0)
      curr=$1"\t"$2;
    else
      print curr"\t"$2
  }
' > "${GENOME_BASE}.intervals.txt"

decompress "$GENOME" | FASTools | awk -F '\t' -v GENOME_BASE="$GENOME_BASE" -v ANNOTATION_BASE="$ANNOTATION_BASE" '
  BEGIN {
    rc="RevCom"
  }
  {
    split($1,s,"[ \t]+")
    seq=gensub("[\r]","","g",$2)
    t[s[1]]=seq
  }
  END {
    while (getline < (GENOME_BASE".intervals.txt")) {
      if ($2>0)
        seq=substr(t[$1],$2,$3-$2+1);
      else {
        seq=substr(t[$1],-$3,-$2+$3+1)
        print seq |& rc
        rc |& getline seq
      }
      print "V\t"(id++)"\t"seq
      lo[$1"\t"$2]=id
      hi[$1"\t"$3]=id
    }
    nr=0
    suniq="sort -k2,2n -k3,3n | uniq"
    while (getline < (ANNOTATION_BASE".transcripts.breaks.txt")) {
      if (nr==0)
        prev=$2;
      else
        print "E\t"hi[$1"\t"prev]"\t"lo[$1"\t"$2] |& suniq;
      nr=(nr+1)%2
    }
    close(suniq,"to")
    while (suniq |& getline line)
      print line
  }
' > "${ANNOTATION_BASE}.fmdg"

