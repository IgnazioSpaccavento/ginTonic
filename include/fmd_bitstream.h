#ifndef FMD_FMD_BITSTREAM_H
#define FMD_FMD_BITSTREAM_H
#include "fmd_common.h"

typedef uint64_t word_t;
#define WORD_LOG_BITS 6
#define WORD_NUM_BITS 64
#define WORD_LOG_MASK 0b111111ull
#define BS_INIT_SIZE_WORDS 8
static const word_t mask_shift_left_64[65] = {
    0b1111111111111111111111111111111111111111111111111111111111111111,
    0b1111111111111111111111111111111111111111111111111111111111111110,
    0b1111111111111111111111111111111111111111111111111111111111111100,
    0b1111111111111111111111111111111111111111111111111111111111111000,
    0b1111111111111111111111111111111111111111111111111111111111110000,
    0b1111111111111111111111111111111111111111111111111111111111100000,
    0b1111111111111111111111111111111111111111111111111111111111000000,
    0b1111111111111111111111111111111111111111111111111111111110000000,
    0b1111111111111111111111111111111111111111111111111111111100000000,
    0b1111111111111111111111111111111111111111111111111111111000000000,
    0b1111111111111111111111111111111111111111111111111111110000000000,
    0b1111111111111111111111111111111111111111111111111111100000000000,
    0b1111111111111111111111111111111111111111111111111111000000000000,
    0b1111111111111111111111111111111111111111111111111110000000000000,
    0b1111111111111111111111111111111111111111111111111100000000000000,
    0b1111111111111111111111111111111111111111111111111000000000000000,
    0b1111111111111111111111111111111111111111111111110000000000000000,
    0b1111111111111111111111111111111111111111111111100000000000000000,
    0b1111111111111111111111111111111111111111111111000000000000000000,
    0b1111111111111111111111111111111111111111111110000000000000000000,
    0b1111111111111111111111111111111111111111111100000000000000000000,
    0b1111111111111111111111111111111111111111111000000000000000000000,
    0b1111111111111111111111111111111111111111110000000000000000000000,
    0b1111111111111111111111111111111111111111100000000000000000000000,
    0b1111111111111111111111111111111111111111000000000000000000000000,
    0b1111111111111111111111111111111111111110000000000000000000000000,
    0b1111111111111111111111111111111111111100000000000000000000000000,
    0b1111111111111111111111111111111111111000000000000000000000000000,
    0b1111111111111111111111111111111111110000000000000000000000000000,
    0b1111111111111111111111111111111111100000000000000000000000000000,
    0b1111111111111111111111111111111111000000000000000000000000000000,
    0b1111111111111111111111111111111110000000000000000000000000000000,
    0b1111111111111111111111111111111100000000000000000000000000000000,
    0b1111111111111111111111111111111000000000000000000000000000000000,
    0b1111111111111111111111111111110000000000000000000000000000000000,
    0b1111111111111111111111111111100000000000000000000000000000000000,
    0b1111111111111111111111111111000000000000000000000000000000000000,
    0b1111111111111111111111111110000000000000000000000000000000000000,
    0b1111111111111111111111111100000000000000000000000000000000000000,
    0b1111111111111111111111111000000000000000000000000000000000000000,
    0b1111111111111111111111110000000000000000000000000000000000000000,
    0b1111111111111111111111100000000000000000000000000000000000000000,
    0b1111111111111111111111000000000000000000000000000000000000000000,
    0b1111111111111111111110000000000000000000000000000000000000000000,
    0b1111111111111111111100000000000000000000000000000000000000000000,
    0b1111111111111111111000000000000000000000000000000000000000000000,
    0b1111111111111111110000000000000000000000000000000000000000000000,
    0b1111111111111111100000000000000000000000000000000000000000000000,
    0b1111111111111111000000000000000000000000000000000000000000000000,
    0b1111111111111110000000000000000000000000000000000000000000000000,
    0b1111111111111100000000000000000000000000000000000000000000000000,
    0b1111111111111000000000000000000000000000000000000000000000000000,
    0b1111111111110000000000000000000000000000000000000000000000000000,
    0b1111111111100000000000000000000000000000000000000000000000000000,
    0b1111111111000000000000000000000000000000000000000000000000000000,
    0b1111111110000000000000000000000000000000000000000000000000000000,
    0b1111111100000000000000000000000000000000000000000000000000000000,
    0b1111111000000000000000000000000000000000000000000000000000000000,
    0b1111110000000000000000000000000000000000000000000000000000000000,
    0b1111100000000000000000000000000000000000000000000000000000000000,
    0b1111000000000000000000000000000000000000000000000000000000000000,
    0b1110000000000000000000000000000000000000000000000000000000000000,
    0b1100000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000,
    0b0000000000000000000000000000000000000000000000000000000000000000,
};

static const word_t mask_shift_right_64[65] = {
    0b1111111111111111111111111111111111111111111111111111111111111111,
    0b0111111111111111111111111111111111111111111111111111111111111111,
    0b0011111111111111111111111111111111111111111111111111111111111111,
    0b0001111111111111111111111111111111111111111111111111111111111111,
    0b0000111111111111111111111111111111111111111111111111111111111111,
    0b0000011111111111111111111111111111111111111111111111111111111111,
    0b0000001111111111111111111111111111111111111111111111111111111111,
    0b0000000111111111111111111111111111111111111111111111111111111111,
    0b0000000011111111111111111111111111111111111111111111111111111111,
    0b0000000001111111111111111111111111111111111111111111111111111111,
    0b0000000000111111111111111111111111111111111111111111111111111111,
    0b0000000000011111111111111111111111111111111111111111111111111111,
    0b0000000000001111111111111111111111111111111111111111111111111111,
    0b0000000000000111111111111111111111111111111111111111111111111111,
    0b0000000000000011111111111111111111111111111111111111111111111111,
    0b0000000000000001111111111111111111111111111111111111111111111111,
    0b0000000000000000111111111111111111111111111111111111111111111111,
    0b0000000000000000011111111111111111111111111111111111111111111111,
    0b0000000000000000001111111111111111111111111111111111111111111111,
    0b0000000000000000000111111111111111111111111111111111111111111111,
    0b0000000000000000000011111111111111111111111111111111111111111111,
    0b0000000000000000000001111111111111111111111111111111111111111111,
    0b0000000000000000000000111111111111111111111111111111111111111111,
    0b0000000000000000000000011111111111111111111111111111111111111111,
    0b0000000000000000000000001111111111111111111111111111111111111111,
    0b0000000000000000000000000111111111111111111111111111111111111111,
    0b0000000000000000000000000011111111111111111111111111111111111111,
    0b0000000000000000000000000001111111111111111111111111111111111111,
    0b0000000000000000000000000000111111111111111111111111111111111111,
    0b0000000000000000000000000000011111111111111111111111111111111111,
    0b0000000000000000000000000000001111111111111111111111111111111111,
    0b0000000000000000000000000000000111111111111111111111111111111111,
    0b0000000000000000000000000000000011111111111111111111111111111111,
    0b0000000000000000000000000000000001111111111111111111111111111111,
    0b0000000000000000000000000000000000111111111111111111111111111111,
    0b0000000000000000000000000000000000011111111111111111111111111111,
    0b0000000000000000000000000000000000001111111111111111111111111111,
    0b0000000000000000000000000000000000000111111111111111111111111111,
    0b0000000000000000000000000000000000000011111111111111111111111111,
    0b0000000000000000000000000000000000000001111111111111111111111111,
    0b0000000000000000000000000000000000000000111111111111111111111111,
    0b0000000000000000000000000000000000000000011111111111111111111111,
    0b0000000000000000000000000000000000000000001111111111111111111111,
    0b0000000000000000000000000000000000000000000111111111111111111111,
    0b0000000000000000000000000000000000000000000011111111111111111111,
    0b0000000000000000000000000000000000000000000001111111111111111111,
    0b0000000000000000000000000000000000000000000000111111111111111111,
    0b0000000000000000000000000000000000000000000000011111111111111111,
    0b0000000000000000000000000000000000000000000000001111111111111111,
    0b0000000000000000000000000000000000000000000000000111111111111111,
    0b0000000000000000000000000000000000000000000000000011111111111111,
    0b0000000000000000000000000000000000000000000000000001111111111111,
    0b0000000000000000000000000000000000000000000000000000111111111111,
    0b0000000000000000000000000000000000000000000000000000011111111111,
    0b0000000000000000000000000000000000000000000000000000001111111111,
    0b0000000000000000000000000000000000000000000000000000000111111111,
    0b0000000000000000000000000000000000000000000000000000000011111111,
    0b0000000000000000000000000000000000000000000000000000000001111111,
    0b0000000000000000000000000000000000000000000000000000000000111111,
    0b0000000000000000000000000000000000000000000000000000000000011111,
    0b0000000000000000000000000000000000000000000000000000000000001111,
    0b0000000000000000000000000000000000000000000000000000000000000111,
    0b0000000000000000000000000000000000000000000000000000000000000011,
    0b0000000000000000000000000000000000000000000000000000000000000001,
    0b0000000000000000000000000000000000000000000000000000000000000000,
};

typedef struct fmd_bs_ {
    word_t *words;
    upos_t cap_in_words;
} fmd_bs_t;

void fmd_bs_init(fmd_bs_t **bs);
void fmd_bs_init_reserve(fmd_bs_t **bs, uint64_t no_words);
void fmd_bs_init_from_buffer(char *buf, size_t buf_size, fmd_bs_t **bs);
void fmd_bs_read_word(fmd_bs_t *bs, upos_t bit_idx, upos_t read_size_in_bits, word_t *read_val);
void fmd_bs_write_word(fmd_bs_t *bs, upos_t bit_idx, word_t write_val, upos_t write_size_in_bits);
void fmd_bs_free(fmd_bs_t *bs);
// functions to wrap into an fstruct
fmd_bs_t *fmd_bs_copy(fmd_bs_t *bs);
int fmd_bs_comp(fmd_bs_t *bs1, fmd_bs_t *bs2);
upos_t fmd_bs_hash(fmd_bs_t *bs1);

static fmd_fstruct_t fmd_fstruct_bs = {
    fmd_bs_comp,
    fmd_bs_hash,
    fmd_bs_free,
    fmd_bs_copy,
};


#endif //FMD_FMD_BITSTREAM_H
